{"version":3,"sources":["block_lpstats.js"],"names":["define","$","Chart","cfg","V","init","notifyListner","lpChart","panel","getPanel","panelBody","selectedLp","exportUrlLink","chart","loader","lpStatsBlock","getLpStatsData","lpId","ajax","url","requestUrl","type","requestType","dataType","requestDataType","sesskey","data","action","JSON","stringify","lpid","done","response","responsedata","graph","labels","datasets","backgroundColor","ctx","options","generateLpChart","fail","error","console","log","always","addClass","removeClass","document","ready","val","getLpStatsBlock","select2","on","this","changeExportUrl","filterReplaceFlag","destroy"],"mappings":"AAAA,aAGAA,OAAO,CAAC,SAAU,eAAgB,qCAAsC,iCAAkC,gCAAiC,SAAUC,EAAGC,EAAOC,EAAKC,GAwFlK,MAAO,CACLC,KApFF,SAAcC,GACZ,IAAIC,EAAU,KACVC,EAAQL,EAAIM,SAAS,iBACrBC,EAAYP,EAAIM,SAAS,gBAAiB,QAC1CE,EAAaD,EAAY,uBACzBE,EAAgBJ,EAAQ,oEACxBK,EAAQH,EAAY,aACpBI,EAASJ,EAAY,WACrBK,GAAe,EAyBnB,SAASC,EAAeC,GACtBhB,EAAEiB,KAAK,CACLC,IAAKhB,EAAIiB,WACTC,KAAMlB,EAAImB,YACVC,SAAUpB,EAAIqB,gBACdC,QAASxB,EAAEO,GAAOkB,KAAK,WACvBA,KAAM,CACJC,OAAQ,wBACRF,QAASxB,EAAEO,GAAOkB,KAAK,WACvBA,KAAME,KAAKC,UAAU,CACnBC,KAAMb,OAGTc,KAAK,SAAUC,IAgBpB,SAAyBC,GACvB,GAAIlB,EAAc,CAChBA,EAAamB,MAAMC,OAASF,EAAaE,OACzCpB,EAAamB,MAAMR,KAAOO,EAAaP,KACvC,IAAIA,EAAO,CACTS,OAAQpB,EAAamB,MAAMC,OAC3BC,SAAU,CAAC,CACTV,KAAMX,EAAamB,MAAMR,KACzBW,gBAAiBtB,EAAamB,MAAMG,mBAGxC9B,EAAU,IAAIL,EAAMa,EAAauB,IAAK,CACpCZ,KAAMA,EACNL,KAAMN,EAAamB,MAAMb,KACzBkB,QAASxB,EAAamB,MAAMK,WA7B9BC,CAAgBR,EAASN,QACxBe,KAAK,SAAUC,GAChBC,QAAQC,IAAIF,KACXG,OAAO,WACR5C,EAAEa,GAAQgC,SAAS,UACnB7C,EAAEY,GAAOkC,YAAY,UACrBzC,EAAc,kBA5ClBL,EAAE+C,UAAUC,MAAM,WAChB,IAAIhC,EAAOhB,EAAEU,GAAYuC,OACzBnC,EAAeZ,EAAIgD,oBAGjBnC,EAAeC,GACfhB,EAAES,EAAY,kBAAkB0C,UAChCnD,EAAEU,GAAY0C,GAAG,SAAU,WACzBpC,EAAOhB,EAAEqD,MAAMJ,MACfjD,EAAEY,GAAOiC,SAAS,UAClB7C,EAAEa,GAAQiC,YAAY,UACtB5C,EAAIoD,gBAAgBtC,EAAML,EAAeR,EAAEoD,mBAC3CjD,EAAQkD,UACRzC,EAAeC,MAGjBX,EAAc","sourcesContent":["/* eslint-disable no-console */\ndefine([\n    'jquery',\n    'core/chartjs',\n    'local_edwiserreports/defaultconfig',\n    'local_edwiserreports/variables',\n    'local_edwiserreports/select2'\n], function($, Chart, cfg, V) {\n    /**\n     * Initialize\n     * @param {function} notifyListner Callback function\n     */\n    function init(notifyListner) {\n        var lpChart = null;\n        var panel = cfg.getPanel(\"#lpstatsblock\");\n        var panelBody = cfg.getPanel(\"#lpstatsblock\", \"body\");\n        var selectedLp = panelBody + \" #wdm-lpstats-select\";\n        var exportUrlLink = panel + \" .dropdown-menu[aria-labelledby='export-dropdown'] .dropdown-item\";\n        var chart = panelBody + \" .ct-chart\";\n        var loader = panelBody + \" .loader\";\n        var lpStatsBlock = false;\n\n        $(document).ready(function() {\n            var lpId = $(selectedLp).val();\n            lpStatsBlock = cfg.getLpStatsBlock();\n\n            if (lpStatsBlock) {\n                getLpStatsData(lpId);\n                $(panelBody + ' .singleselect').select2();\n\n                $(selectedLp).on(\"change\", function() {\n                    lpId = $(this).val();\n                    $(chart).addClass(\"d-none\");\n                    $(loader).removeClass(\"d-none\");\n                    cfg.changeExportUrl(lpId, exportUrlLink, V.filterReplaceFlag);\n                    lpChart.destroy();\n                    getLpStatsData(lpId);\n                });\n            } else {\n                notifyListner(\"lpStatsBlock\");\n            }\n        });\n\n        /**\n         * Get learning plan stats\n         * @param {Integer} lpId Learning plan id\n         */\n        function getLpStatsData(lpId) {\n            $.ajax({\n                url: cfg.requestUrl,\n                type: cfg.requestType,\n                dataType: cfg.requestDataType,\n                sesskey: $(panel).data(\"sesskey\"),\n                data: {\n                    action: 'get_lpstats_data_ajax',\n                    sesskey: $(panel).data(\"sesskey\"),\n                    data: JSON.stringify({\n                        lpid: lpId\n                    })\n                },\n            })\n                .done(function(response) {\n                    generateLpChart(response.data);\n                })\n                .fail(function(error) {\n                    console.log(error);\n                })\n                .always(function() {\n                    $(loader).addClass(\"d-none\");\n                    $(chart).removeClass(\"d-none\");\n                    notifyListner(\"lpStatsBlock\");\n                });\n        }\n\n        /**\n         * Generate learning plan chart.\n         * @param {Object} responsedata Generate chart response data.\n         */\n        function generateLpChart(responsedata) {\n            if (lpStatsBlock) {\n                lpStatsBlock.graph.labels = responsedata.labels;\n                lpStatsBlock.graph.data = responsedata.data;\n\n                var data = {\n                    labels: lpStatsBlock.graph.labels,\n                    datasets: [{\n                        data: lpStatsBlock.graph.data,\n                        backgroundColor: lpStatsBlock.graph.backgroundColor,\n                    }]\n                };\n\n                lpChart = new Chart(lpStatsBlock.ctx, {\n                    data: data,\n                    type: lpStatsBlock.graph.type,\n                    options: lpStatsBlock.graph.options\n                });\n            }\n        }\n    }\n\n    // Must return the init function\n    return {\n        init: init\n    };\n});\n"],"file":"block_lpstats.min.js"}