{"version":3,"sources":["block_courseprogress.js"],"names":["define","$","Chart","cfg","V","common","init","notifyListner","cpGraph","panel","getPanel","panelBody","selectedCourse","chart","loader","cpBlockData","form","getCourseProgressData","courseId","val","find","destroy","show","ajax","url","requestUrl","type","requestType","dataType","requestDataType","data","action","sesskey","JSON","stringify","courseid","done","response","graph","fail","error","console","log","always","labels","datasets","label","backgroundColor","ctx","options","hide","fadeIn","document","ready","getCourseProgressBlock","select2","on"],"mappings":"AAAA,aAGAA,OAAO,CAAC,SAAU,eAAgB,qCAAsC,iCAAkC,WAAY,gCAAiC,SAAUC,EAAGC,EAAOC,EAAKC,EAAGC,GAqGjL,MAAO,CACLC,KAjGF,SAAcC,GACZ,IAAIC,EAAU,KACVC,EAAQN,EAAIO,SAAS,wBACrBC,EAAYR,EAAIO,SAAS,uBAAwB,QACjDE,EAAiBD,EAAY,8BAC7BE,EAAQF,EAAY,aACpBG,EAASH,EAAY,WAErBI,GAAc,EACdC,EAAOf,EAAEQ,EAAQ,wBAyBrB,SAASQ,IACP,IAAIC,EAAWjB,EAAEW,GAAgBO,MACjCH,EAAKI,KAAK,wBAAwBD,IAAID,GAElCV,GACFA,EAAQa,UAIVhB,EAAOS,OAAOQ,KAAK,wBACnBrB,EAAEsB,KAAK,CACLC,IAAKrB,EAAIsB,WACTC,KAAMvB,EAAIwB,YACVC,SAAUzB,EAAI0B,gBACdC,KAAM,CACJC,OAAQ,qCACRC,QAAS/B,EAAEQ,GAAOqB,KAAK,WACvBA,KAAMG,KAAKC,UAAU,CACnBC,SAAUjB,OAGbkB,KAAK,SAAUC,GAChBtB,EAAYuB,MAAMR,KAAOO,EAASP,OACjCS,KAAK,SAAUC,GAChBC,QAAQC,IAAIF,KACXG,OAAO,WAiBZ,IAEMb,EAAAA,EAAO,CACTc,OAAQ7B,EAAYuB,MAAMM,OAC1BC,SAAU,CAAC,CACTC,MAAO/B,EAAYuB,MAAMQ,MACzBhB,KAAMf,EAAYuB,MAAMR,KACxBiB,gBAAiBhC,EAAYuB,MAAMS,mBAvBrCvC,EA2BK,IAAIN,EAAMa,EAAYiC,IAAK,CAChClB,KAAMA,EACNJ,KAAMX,EAAYuB,MAAMZ,KACxBuB,QAASlC,EAAYuB,MAAMW,UA7B3BhD,EAAEa,GAAQoC,OACVjD,EAAEY,GAAOsC,OAAO,QAGhB5C,EAAc,kBAEdF,EAAOS,OAAOoC,KAAK,0BArDvBjD,EAAEmD,UAAUC,MAAM,SAAUpD,IAC1Bc,EAAcZ,EAAImD,2BAGhBrC,IACAhB,EAAEU,EAAY,kBAAkB4C,UAChCtD,EAAEW,GAAgB4C,GAAG,SAAU,WAC7BvD,EAAEY,GAAOqC,OACTjD,EAAEa,GAAQQ,OACVL,OAIFV,EAAc","sourcesContent":["/* eslint-disable no-console */\ndefine([\n    'jquery',\n    'core/chartjs',\n    'local_edwiserreports/defaultconfig',\n    'local_edwiserreports/variables',\n    './common',\n    'local_edwiserreports/select2'\n], function($, Chart, cfg, V, common) {\n\n    /**\n     * Initialize\n     * @param {function} notifyListner Callback function\n     */\n    function init(notifyListner) {\n        var cpGraph = null;\n        var panel = cfg.getPanel(\"#courseprogressblock\");\n        var panelBody = cfg.getPanel(\"#courseprogressblock\", \"body\");\n        var selectedCourse = panelBody + \" #wdm-courseprogress-select\";\n        var chart = panelBody + \" .ct-chart\";\n        var loader = panelBody + \" .loader\";\n        var exportUrlLink = panel + \" .dropdown-menu[aria-labelledby='export-dropdown'] .dropdown-item\";\n        var cpBlockData = false;\n        var form = $(panel + ' form.download-links');\n\n        /**\n         * On document ready generate course progress block\n         */\n        $(document).ready(function($) {\n            cpBlockData = cfg.getCourseProgressBlock();\n\n            // If course progress block is there\n            if (cpBlockData) {\n                getCourseProgressData();\n                $(panelBody + ' .singleselect').select2();\n\n                $(selectedCourse).on(\"change\", function() {\n                    $(chart).hide();\n                    $(loader).show();\n\n                    getCourseProgressData();\n                });\n            } else {\n                /* Notify that this event is completed */\n                notifyListner(\"courseProgress\");\n            }\n        });\n\n        /**\n         * Get progress data through ajax\n         */\n        function getCourseProgressData() {\n            var courseId = $(selectedCourse).val();\n            form.find('input[name=\"filter\"]').val(courseId);\n\n            // If progress graph already exist then destroy\n            if (cpGraph) {\n                cpGraph.destroy();\n            }\n\n            // Show loader.\n            common.loader.show('#courseprogressblock');\n\n            $.ajax({\n                url: cfg.requestUrl,\n                type: cfg.requestType,\n                dataType: cfg.requestDataType,\n                data: {\n                    action: 'get_courseprogress_graph_data_ajax',\n                    sesskey: $(panel).data(\"sesskey\"),\n                    data: JSON.stringify({\n                        courseid: courseId\n                    })\n                },\n            })\n                .done(function(response) {\n                    cpBlockData.graph.data = response.data;\n                })\n                .fail(function(error) {\n                    console.log(error);\n                })\n                .always(function() {\n                    cpGraph = generateCourseProgressGraph();\n                    $(loader).hide();\n                    $(chart).fadeIn(\"slow\");\n\n                    /* Notify that this event is completed */\n                    notifyListner(\"courseProgress\");\n\n                    // Hide loader.\n                    common.loader.hide('#courseprogressblock');\n                });\n        }\n\n        /**\n         * Generate course progress graph.\n         * @returns {Object} chart object\n         */\n        function generateCourseProgressGraph() {\n            // Create configuration data for course progress block\n            var data = {\n                labels: cpBlockData.graph.labels,\n                datasets: [{\n                    label: cpBlockData.graph.label,\n                    data: cpBlockData.graph.data,\n                    backgroundColor: cpBlockData.graph.backgroundColor\n                }]\n            };\n\n            // Return chart object\n            return new Chart(cpBlockData.ctx, {\n                data: data,\n                type: cpBlockData.graph.type,\n                options: cpBlockData.graph.options\n            });\n        }\n    }\n\n    // Must return the init function\n    return {\n        init: init\n    };\n});\n"],"file":"block_courseprogress.min.js"}